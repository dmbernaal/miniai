import ast
import nbformat
import os

def extract_names(code):
    root = ast.parse(code)
    class_present = False
    names = []
    for node in ast.walk(root):
        if isinstance(node, ast.ClassDef):
            names.append(node.name)
            class_present = True
        elif isinstance(node, ast.FunctionDef) and not class_present:
            if not node.name.startswith('_'):
                names.append(node.name)
    return names

def format_cells(notebook_file, export_token="#export"):
    with open(notebook_file) as f:
        nb = nbformat.read(f, as_version=4)
    exported_cells = [cell for cell in nb['cells'] if cell['source'].startswith(export_token)]
    return exported_cells

def cells_2_txt(notebook_file, exported_cells):
    alls = []
    start_code = "# AUTOGENERATED FROM " + notebook_file + "\n"
    raw_code = ""
    for cell in exported_cells:
        raw_code += cell['source'][len('#export'):].strip() + '\n\n'
        alls.extend(extract_names(cell['source']))
    code = start_code + raw_code + "__all__ = " + str(alls)
    return code

def write_code(output_file, code):
    with open(output_file, 'w') as f:
        f.write(code)

def nb_export(notebook_file, output_file, export_token="#export"):
    exported_cells = format_cells(notebook_file, export_token)
    code = cells_2_txt(notebook_file, exported_cells)
    write_code(output_file, code)
